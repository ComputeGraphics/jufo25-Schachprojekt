Programmstruktur:
Das Computerprogramm ist im C# .NET Framework 8.0 von Microsoft als Konsolenanwendung umgesetzt, um plattformübergreifend und mit wenig Ressourcenaufwand zu arbeiten. 


PROGRAMM-DATEIEN UND KLASSEN:

Das Programm setzt sich aus 5 verschiedenen Programmdateien zusammen, die unterschiedliche Zwecke erfüllen. In ihnen befinden sich sogenannte Klassen, die den Zugriff von anderen Programmteilen erleichtern und verständlicher machen.
Das Programm enthält folgende Klassen:
Init -> Start Datei und Darstellung des Menüs
board_visual -> Start des Renderers und Figurenverarbeitung
scom2 -> Stellt Methoden zur einfachen Kommunikation mit dem Arduino und stellt die Verbindung her
Renderer -> Interpretiert die Werte der database in ein grafisches Schachbrett und bietet grafisches Debugging an
database.physical -> Speichert alle vom Arduino empfangenen Daten und Kalibrierungswerte
database.display -> Speichert alle für die Darstellung vorbereiteten Werte 


DEKLARATIONEN UND METHODEN:

Init:
Main(): Zeige das Hauptmenü
SettingsMenu(): Menü zum Festlegen aller Einstellungen mithilfe von Tastatureingaben

board_visual: 
[Methoden der Klasse database.physical in späterem Abschnitt beschrieben]
show(): Eine Aufgabenliste die vor der Darstellung des visuellen Schachbrettes abgearbeitet werden muss.
1. Gibt dem scom2 Thread die Aufgabe den Serial Port zu öffnen und ggf. den Selbsttest erneut durchzuführen
2. Die Klasse database.physical führt die Kalibrierung des Schachbrettes mithilfe der calibrate(resolution)  Methode durch.
3. Dem Nutzer wird jetzt die Anweisung gegeben die Figuren auf das Feld zu stellen, damit mithilfe der database.physical.calib_pieces() Methode die Figurdaten abgenommen werden können
4. Starte den Renderer
requestAll_rangeMode(): Ruft alle Felder reihenweise auf, verarbeitet die Werte und schreibt die Figuren in das database.display.field Array

scom2:
init(): Erstellt einen asynchronen Thread zum bidirektionalen Datentransfer zwischen Computer und der Microcontroller Einheit, der Kommandos übermittelt und Antworten zurückgibt.
1. Sucht mithilfe der bereitgestellten WIN32_SERIAL Bibliothek nach einem 
Arduino
2. Mithilfe von Standardwerten oder Nutzerabfragen werden die Einstellungen festgelegt
3. Der Port wird geöffnet und ein Interrupt Handler platziert, der alle einkommenden Daten an den Anfrageprozess weitergibt.
UI(): Zeigt eine Oberfäche, die dem Nutzer ermöglicht eigene Befehle an den Microcontroller zu senden
sendCommand(command): Sendet ein Kommando an der Microcontroller und gibt die Antwort zurück
multiCommand(command,count): Sendet ein Kommando, bündelt eine in count angegebene Antwortanzahl in eine Liste und gibt die ganze Antwortliste zurück
ReadEventHandler(object sender,SerialDataReceivedEventArgs): Handling von einkommenden Nachrichten

Renderer:
draw_demo(): Zeichnet ein Demonstrationsfeld um dem Nutzer die möglichkeit zu geben
draw_number(): Zeichnet ein Feld und füllt dieses mit Intager Sensorwerten statt Figursymbolen zum Debugging
draw(): Zeichnet ein Feld und füllt dieses mit den Übersetzungen der Symbole aus den Symboldatenbanken und aktualisiert diese ggf. kontinuierlich

database.display:
byte[] inverter: Invertiert Zahlen des Schachfelds auf die andere Seite, da das Schachbrett von unten nach oben beschrieben wird und somit index 0 Feld 8 entspricht
Dictionary<> translator: Übersetzt Figurcodes in ein auf dem Feld darstellbares UTF-8 Symbol
byte[,] field: 8x8 Feld zur Speicherung der Figurcodes
writeSample(): Schreibt eine Beispiel Schachfeldaufstellung in das Figurcode Array
Clear(): Leert das Figurcode Array

database.physical:
defaults (mehrere): Mehrere Variablen verschiedener Typen, die Standardeinstellungen zu den Magnetfeldsensoren enthalten
int[,] min/int[,] max: 8x8 Feld, dass alle Minima/Maxima für die Feldkalibrierung enthält. Standardmäßig 0, um dem Programm die Möglichkeit zu geben ohne Kalibrierung zu arbeiten
int[,] av: 8x8 Feld mit Druchschnitten, die bei der Kalibrierung erreichnet werden. Ohne Kalibrierung mit einem Standardwert gefüllt
calibrate(resolution): Nimmt mit einer in resolution angegeben Auflösung Kalibrierungswerte und trägt diese in die Felder ein. Um Zeit zu sparen gibt es hier mehrere Auflösungen zur Auswahl, da der Vorgang sehr Zeitintensiv ist
calib_pieces(): Fordert den Nutzer auf, Figuren auf das Feld zu stellen und nimmt die Sensorwerte. Danach werden diese in weitere Arrays eingetragen, damit aus diesen Werten die Figur errechnet werden kann


WIE LIEST DAS PROGRAMM DAS FELD EIN

Das einlesen des Feldes erfolgt über den QRANGE Befehl des Arduinos und ließt das Feld Multiplexer für Multiplexer von 0-7 ein und die Felder von 7-0. Um bei der Beschriftung das Feld von unten nach oben zu beschreiben, ohne den Index zu invertieren. 
